## mortality rates
covid_data_states <- covid_data_states %>%
mutate(mortality_rate = death / positive)
## merge with regions
regions <- regions %>%
rename(state = stname)
covid_data_states <- right_join(regions, covid_data_states, by = "state")
## deal with RI and OK
covid_data_states <- covid_data_states %>%
mutate(Region = ifelse(state == "Rhode Island ", "Northeast", Region),
Region = ifelse(state == "Oklahoma ", "South", Region),
Division = ifelse(state == "Rhode Island ", "New England", Division),
Division = ifelse(state == "Oklahoma ", "West South Central", Division))
## is there hospitalization data for this state?
covid_data_states <- covid_data_states %>%
mutate(month_hosp_flag = ifelse(hospitalizedCurrently > 0 & date == (max(date) - 30), 1, 0),
today_hosp_flag = ifelse(hospitalizedCurrently > 0 & date == max(date), 1, 0),
hosp_flag_date = ifelse(hospitalizedCurrently > 0, 1, 0),1) %>%
group_by(state) %>%
mutate(hosp_include = sum(month_hosp_flag, today_hosp_flag))
# check uniqueness
nrow(covid_data_states)
nrow(distinct(covid_data_states))/nrow(covid_data_states)
## merge to hexmap
hexmap <- read_excel("Periodic Table Map.xlsx", col_names = TRUE)
hexmap <- hexmap %>% select(Row, Column, state)
covid_data_states <- left_join(covid_data_states, hexmap, by = "state")
## deal with OK and RI for some reason
covid_data_states <- covid_data_states %>%
mutate(Row = ifelse(state_abb == "RI", 2, Row),
Column = ifelse(state_abb == "RI", 13, Column),
Row = ifelse(state_abb == "OK", 4, Row),
Column = ifelse(state_abb == "OK", 5, Column))
## deaths projection based on state CFR to date
covid_data_states <- covid_data_states %>%
mutate(deaths_proj_2wks = pos_7d_avg * (deaths / lag(positive, n = 14)))
## election results
election <- read_csv("https://raw.githubusercontent.com/kshaffer/election2016/master/2016ElectionResultsByState.csv")
election <- election %>% select(state, clintonVotes, trumpVotes, totalVotes) %>%
mutate(result2016 = if_else(clintonVotes > trumpVotes, "Blue", "Red"))
covid_data_states <- left_join(covid_data_states, election, by = "state")
## governors
gov <- read_csv("https://raw.githubusercontent.com/CivilServiceUSA/us-governors/master/source/us-governors.csv")
gov <- gov %>% select(state, party)
## need to update the data (which is from 2019) and deal with RI and OK
covid_data_states <- left_join(covid_data_states, gov, by = "state") %>%
mutate(party = ifelse(str_detect(state, "Oklahoma"), "republican", party),
party = ifelse(str_detect(state, "Rhode"), "democrat", party),
party = ifelse(str_detect(state, "Maine"), "democrat", party))
## deaths lagging
covid_data_states <- covid_data_states %>%
group_by(state) %>%
arrange(state, date) %>%
mutate(deaths_in_14days = lead(death_7d_avg, n = 14),
deaths_in_21days = lead(death_7d_avg, n = 21),
deaths_in_28days = lead(death_7d_avg, n = 28))
## ranking states by positive cases
ranking <- covid_data_states %>% filter(max_date_ind == "Yes") %>%
select(state, pos_7d_avg, pop) %>%
ungroup() %>%
mutate(pos_7d_perpop = pos_7d_avg / pop,
cases_rank = rank(-pos_7d_perpop, na.last = TRUE)) %>%
select(state, cases_rank)
covid_data_states <- left_join(covid_data_states, ranking , by = "state")
## export to CSV
export(covid_data_states, "states-tableau.csv")
######################################################
# GOOGLE MOBILITY
######################################################
mobility <- read_csv("Global_Mobility_Report.csv", col_types = cols(sub_region_2 = col_character())) %>%
filter(country_region == "United States") %>%
rename(state = sub_region_1, county = sub_region_2) %>%
mutate(county = ifelse(is.na(county), "All Counties", county),
state = ifelse(is.na(state), "All States", state))
states <- covid_data_states %>%
select(state, state_abb) %>%
distinct()
mobility <- left_join(mobility, states, by = "state")
export(mobility, "mobility.csv")
library(reticulate)
use_python(python = "/Users/conorkelly/opt/anaconda3/bin/python")
use_python(python = "/Users/conorkelly/opt/anaconda3/bin/python", required = TRUE)
use_python(python = "/Users/conorkelly/opt/anaconda3/bin/python.exe", required = TRUE)
use_python(python = "/Users/conorkelly/opt/anaconda3/bin/python")
library(reticulate)
use_python(python = "/Users/conorkelly/opt/anaconda3/bin/python", required = TRUE)
use_python(python = "/opt/anaconda3/bin/python", required = TRUE)
reticulate::repl_python()
library(reticulate)
use_python(python = "/opt/anaconda3/bin/python", required = TRUE)
n = 6
reticulate::repl_python()
source('~/Documents/Vaccine-Tracker/vaccine_tracker.R', echo=TRUE)
missed <- fromJSON("https://raw.githubusercontent.com/COVID19Tracking/covid-tracking-data/4b9b5d18f47e6942ba458f13ce098e887ad7039f/data/cdc_vaccinations.json")
library(jsonlite)
library(tidyverse)
library(janitor)
library(lubridate)
library(googlesheets4)
setwd("/Users/conorkelly/Documents/Vaccine-Tracker")
## import existing data cached from previous day
old_data <- read_csv("https://raw.githubusercontent.com/ckelly17/Vaccine-Tracker/main/vaccine_db.csv") %>%
mutate(date = as.character(date),
skipped = "No",
skip_n = 0) %>%
filter(!is.na(date))
missed <- fromJSON("https://raw.githubusercontent.com/COVID19Tracking/covid-tracking-data/4b9b5d18f47e6942ba458f13ce098e887ad7039f/data/cdc_vaccinations.json")
old_data <- bind_rows(old_data, missed)
missed <- missed[2]
missed <- fromJSON("https://raw.githubusercontent.com/COVID19Tracking/covid-tracking-data/4b9b5d18f47e6942ba458f13ce098e887ad7039f/data/cdc_vaccinations.json")
missed <- missed[[2]]
library(jsonlite)
library(tidyverse)
library(janitor)
library(lubridate)
library(googlesheets4)
setwd("/Users/conorkelly/Documents/Vaccine-Tracker")
## import existing data cached from previous day
old_data <- read_csv("https://raw.githubusercontent.com/ckelly17/Vaccine-Tracker/main/vaccine_db.csv") %>%
mutate(date = as.character(date),
skipped = "No",
skip_n = 0) %>%
filter(!is.na(date))
missed <- fromJSON("https://raw.githubusercontent.com/COVID19Tracking/covid-tracking-data/4b9b5d18f47e6942ba458f13ce098e887ad7039f/data/cdc_vaccinations.json")
missed <- missed[[2]]
old_data <- bind_rows(old_data, missed)
return <- fromJSON("https://covid.cdc.gov/covid-data-tracker/COVIDData/getAjaxData?id=vaccination_data")
history <- read_csv("https://raw.githubusercontent.com/COVID19Tracking/covid-tracking-data/master/data/cdc_vaccinations_timeseries_daily.csv") %>%
clean_names() %>%
filter(date >= "2021-02-12") %>%
mutate(date = as.character(date))
new_data <- return[[2]] %>%
clean_names() %>%
mutate(date = as.character(ymd(date))) %>%
distinct(date, location, .keep_all = TRUE) %>%
mutate(skipped = "No",
skip_n = 0) # to flag if CDC did not upload for some days
date_cutoff <- ymd(max(new_data$date, na.rm = TRUE))
# for skipped days
yesterday <- new_data %>%
mutate(date = as.character(as.Date(date) - 1),
skipped = "Yes",
skip_n = 1)
# day before
day_before <- new_data %>%
mutate(date = as.character(as.Date(date) - 2),
skipped = "Yes",
skip_n = 2)
# n-3
three_days_ago <- new_data %>%
mutate(date = as.character(as.Date(date) - 3),
skipped = "Yes",
skip_n = 3)
# save a copy
date <- as.character(max(ymd(new_data$date)))
write_csv(new_data, paste0("daily_backup/", date, ".csv"))
## add skipped values to old
last <- old_data %>%
group_by(long_name) %>%
mutate(date = ymd(date)) %>%
filter(date == max(date, na.rm = TRUE)) %>%
ungroup()
# n + 1
n1 <- last %>%
mutate(date = date + 1)
# n +2
n2 <- last %>%
mutate(date = date + 2)
# n + 3
n3 <- last %>%
mutate(date = date + 3)
temp <- old_data %>%
mutate(date = ymd(date)) %>%
bind_rows(n1, n2, n3) %>%
filter(date < date_cutoff) %>%
mutate(date = as.character(date))
# vaccines_raw <- bind_rows(temp, new_data, yesterday, day_before, three_days_ago) %>%
# bind to old
vaccines_raw <- bind_rows(temp, new_data) %>%
distinct(date, location, .keep_all = TRUE) %>%
arrange(date, location) %>%
group_by(location, date) %>%
filter(doses_administered == min(doses_administered, na.rm = TRUE)) %>% # to get rid of duplicates for skipped days
ungroup()
## write to main repo
write_csv(vaccines_raw, "vaccine_db.csv")
## clean for viz
vaccines <- vaccines_raw %>%
rename(state_abb = location,
state = long_name,
pop = census2019) %>%
# set up to get new values
mutate(date = ymd(date)) %>%
group_by(state) %>%
mutate(n = row_number()) %>%
arrange(state, date)
## fill in miss values for dose 2 on 1/14
vaccines <- vaccines %>%
mutate(administered_dose2 = ifelse(date == "2021-01-14", lag(administered_dose2), administered_dose2))
# get new values
vaccines <- vaccines %>%
# calculate daily change
mutate(
# hot fix for 2021-01-11
doses_distributed = ifelse(date  == "2021-01-09", lag(doses_distributed), doses_distributed),
doses_distributed = ifelse(date  == "2021-01-10", lag(doses_distributed), doses_distributed),
doses_administered = ifelse(date  == "2021-01-09", lag(doses_administered), doses_administered),
doses_administered = ifelse(date  == "2021-01-10", lag(doses_administered), doses_administered),
# all doses
new_dist = ifelse(n >= 2, doses_distributed - lag(doses_distributed, 1), 0),
new_admin = ifelse(n >= 2, doses_administered - lag(doses_administered, 1), 0),
# dose 1 and 2
new_dose1 = ifelse(n >= 2, administered_dose1 - lag(administered_dose1, 1), 0),
new_dose2 = ifelse(n >= 2, administered_dose2 - lag(administered_dose2, 1), 0)) %>%
ungroup() %>%
# max_date_ind
mutate(max_date_ind = ifelse(date == max(date), "Yes", "No"))
## adding in dose 1/2 etc. on 1/12
vaccines <- vaccines %>%
mutate(unknown_dose = ifelse(date < "2021-01-12", doses_administered, 0))
#unknown_dose = ifelse(date >= "2021-01-12", doses_administered - administered_dose1 - administered_dose2, unknown_dose))
## add US abbr
vaccines <- vaccines %>%
group_by(state) %>%
fill(state_abb, .direction = "up")
## categorize states and non-states
territories <- c("American Samoa",
"Federated States of Micronesia",
"Guam",
"Marshall Islands",
"Northern Mariana Islands",
"Republic of Palau",
"Virgin Islands",
"Puerto Rico")
fed_programs <- c("Long Term Care",
"Dept of Defense",
"Bureau of Prisons",
"Indian Health Svc",
"Veterans Health")
vaccines <- vaccines %>%
mutate(category = "state",
category = ifelse(state %in% territories, "territory", category),
category = ifelse(state %in% fed_programs, "federal program", category),
category = ifelse(state %in% "United States", "United States", category))
## state rank
vaccines <- vaccines %>%
group_by(category, date) %>%
mutate(doses_rank = rank(desc(doses_administered / pop))) %>%
ungroup()
# export
write_csv(vaccines, "vaccine_viz.csv")
##### AGES
json <- fromJSON("https://raw.githubusercontent.com/COVID19Tracking/covid-tracking-data/master/data/cdc_vaccinations_demographics.json")
vax_demo <- json[[2]] %>%
clean_names()
ages <- vax_demo %>%
select(administered_dose1, administered_dose2, date, demographic_category) %>%
filter(demographic_category %in% c("Ages_<18yrs",
"Ages_18-29_yrs",
"Ages_30-39_yrs",
"Ages_40-49_yrs",
"Ages_50-64_yrs",
"Ages_65-74_yrs",
"Ages_75+_yrs")) %>%
rename(age_group = demographic_category) %>%
mutate(age_group_pop = ifelse(age_group %in% "Ages_<18yrs", 81625416, NA),
age_group_pop = ifelse(age_group %in% "Ages_18-29_yrs", 45141956, age_group_pop),
age_group_pop = ifelse(age_group %in% "Ages_30-39_yrs", 44168826, age_group_pop),
age_group_pop = ifelse(age_group %in% "Ages_40-49_yrs", 40319374, age_group_pop),
age_group_pop = ifelse(age_group %in% "Ages_50-64_yrs", 62925688, age_group_pop),
age_group_pop = ifelse(age_group %in% "Ages_65-74_yrs", 31483433, age_group_pop),
age_group_pop = ifelse(age_group %in% "Ages_75+_yrs", 22574830, age_group_pop),
pct_vax1 = administered_dose1 / age_group_pop,
pct_vax2 = administered_dose2 / age_group_pop)
pct_known <- vax_demo %>%
filter(demographic_category %in% "Age_known")
pct_known <- max(pct_known$administered_dose1_pct_us)
ages$pct_known <- pct_known
write_csv(ages, "ages_viz.csv")
# by date
vaccines %>%
group_by(date) %>%
filter(category %in% "United States") %>%
summarise(total = sum(doses_administered)) %>%
tail()
View(old_data)
View(missed)
library(jsonlite)
library(tidyverse)
library(janitor)
library(lubridate)
library(googlesheets4)
setwd("/Users/conorkelly/Documents/Vaccine-Tracker")
## import existing data cached from previous day
old_data <- read_csv("https://raw.githubusercontent.com/ckelly17/Vaccine-Tracker/main/vaccine_db.csv") %>%
mutate(date = as.character(date),
skipped = "No",
skip_n = 0) %>%
filter(!is.na(date))
missed <- fromJSON("https://raw.githubusercontent.com/COVID19Tracking/covid-tracking-data/4b9b5d18f47e6942ba458f13ce098e887ad7039f/data/cdc_vaccinations.json")
missed <- missed[[2]]
old_data <- bind_rows(old_data, missed)
## get new data
return <- fromJSON("https://covid.cdc.gov/covid-data-tracker/COVIDData/getAjaxData?id=vaccination_data")
history <- read_csv("https://raw.githubusercontent.com/COVID19Tracking/covid-tracking-data/master/data/cdc_vaccinations_timeseries_daily.csv") %>%
clean_names() %>%
filter(date >= "2021-02-12") %>%
mutate(date = as.character(date))
new_data <- return[[2]] %>%
clean_names() %>%
mutate(date = as.character(ymd(date))) %>%
distinct(date, location, .keep_all = TRUE) %>%
mutate(skipped = "No",
skip_n = 0) # to flag if CDC did not upload for some days
date_cutoff <- ymd(max(new_data$date, na.rm = TRUE))
# for skipped days
yesterday <- new_data %>%
mutate(date = as.character(as.Date(date) - 1),
skipped = "Yes",
skip_n = 1)
# day before
day_before <- new_data %>%
mutate(date = as.character(as.Date(date) - 2),
skipped = "Yes",
skip_n = 2)
# n-3
three_days_ago <- new_data %>%
mutate(date = as.character(as.Date(date) - 3),
skipped = "Yes",
skip_n = 3)
# save a copy
date <- as.character(max(ymd(new_data$date)))
write_csv(new_data, paste0("daily_backup/", date, ".csv"))
## add skipped values to old
last <- old_data %>%
group_by(long_name) %>%
mutate(date = ymd(date)) %>%
filter(date == max(date, na.rm = TRUE)) %>%
ungroup()
# n + 1
n1 <- last %>%
mutate(date = date + 1)
# n +2
n2 <- last %>%
mutate(date = date + 2)
# n + 3
n3 <- last %>%
mutate(date = date + 3)
temp <- old_data %>%
mutate(date = ymd(date)) %>%
bind_rows(n1, n2, n3) %>%
filter(date < date_cutoff) %>%
mutate(date = as.character(date))
# vaccines_raw <- bind_rows(temp, new_data, yesterday, day_before, three_days_ago) %>%
# bind to old
vaccines_raw <- bind_rows(temp, new_data) %>%
distinct(date, location, .keep_all = TRUE) %>%
arrange(date, location) %>%
group_by(location, date) %>%
filter(doses_administered == min(doses_administered, na.rm = TRUE)) %>% # to get rid of duplicates for skipped days
ungroup()
## write to main repo
write_csv(vaccines_raw, "vaccine_db.csv")
## clean for viz
vaccines <- vaccines_raw %>%
rename(state_abb = location,
state = long_name,
pop = census2019) %>%
# set up to get new values
mutate(date = ymd(date)) %>%
group_by(state) %>%
mutate(n = row_number()) %>%
arrange(state, date)
## fill in miss values for dose 2 on 1/14
vaccines <- vaccines %>%
mutate(administered_dose2 = ifelse(date == "2021-01-14", lag(administered_dose2), administered_dose2))
# get new values
vaccines <- vaccines %>%
# calculate daily change
mutate(
# hot fix for 2021-01-11
doses_distributed = ifelse(date  == "2021-01-09", lag(doses_distributed), doses_distributed),
doses_distributed = ifelse(date  == "2021-01-10", lag(doses_distributed), doses_distributed),
doses_administered = ifelse(date  == "2021-01-09", lag(doses_administered), doses_administered),
doses_administered = ifelse(date  == "2021-01-10", lag(doses_administered), doses_administered),
# all doses
new_dist = ifelse(n >= 2, doses_distributed - lag(doses_distributed, 1), 0),
new_admin = ifelse(n >= 2, doses_administered - lag(doses_administered, 1), 0),
# dose 1 and 2
new_dose1 = ifelse(n >= 2, administered_dose1 - lag(administered_dose1, 1), 0),
new_dose2 = ifelse(n >= 2, administered_dose2 - lag(administered_dose2, 1), 0)) %>%
ungroup() %>%
# max_date_ind
mutate(max_date_ind = ifelse(date == max(date), "Yes", "No"))
## adding in dose 1/2 etc. on 1/12
vaccines <- vaccines %>%
mutate(unknown_dose = ifelse(date < "2021-01-12", doses_administered, 0))
#unknown_dose = ifelse(date >= "2021-01-12", doses_administered - administered_dose1 - administered_dose2, unknown_dose))
## add US abbr
vaccines <- vaccines %>%
group_by(state) %>%
fill(state_abb, .direction = "up")
## categorize states and non-states
territories <- c("American Samoa",
"Federated States of Micronesia",
"Guam",
"Marshall Islands",
"Northern Mariana Islands",
"Republic of Palau",
"Virgin Islands",
"Puerto Rico")
fed_programs <- c("Long Term Care",
"Dept of Defense",
"Bureau of Prisons",
"Indian Health Svc",
"Veterans Health")
vaccines <- vaccines %>%
mutate(category = "state",
category = ifelse(state %in% territories, "territory", category),
category = ifelse(state %in% fed_programs, "federal program", category),
category = ifelse(state %in% "United States", "United States", category))
## state rank
vaccines <- vaccines %>%
group_by(category, date) %>%
mutate(doses_rank = rank(desc(doses_administered / pop))) %>%
ungroup()
# export
write_csv(vaccines, "vaccine_viz.csv")
##### AGES
json <- fromJSON("https://raw.githubusercontent.com/COVID19Tracking/covid-tracking-data/master/data/cdc_vaccinations_demographics.json")
vax_demo <- json[[2]] %>%
clean_names()
ages <- vax_demo %>%
select(administered_dose1, administered_dose2, date, demographic_category) %>%
filter(demographic_category %in% c("Ages_<18yrs",
"Ages_18-29_yrs",
"Ages_30-39_yrs",
"Ages_40-49_yrs",
"Ages_50-64_yrs",
"Ages_65-74_yrs",
"Ages_75+_yrs")) %>%
rename(age_group = demographic_category) %>%
mutate(age_group_pop = ifelse(age_group %in% "Ages_<18yrs", 81625416, NA),
age_group_pop = ifelse(age_group %in% "Ages_18-29_yrs", 45141956, age_group_pop),
age_group_pop = ifelse(age_group %in% "Ages_30-39_yrs", 44168826, age_group_pop),
age_group_pop = ifelse(age_group %in% "Ages_40-49_yrs", 40319374, age_group_pop),
age_group_pop = ifelse(age_group %in% "Ages_50-64_yrs", 62925688, age_group_pop),
age_group_pop = ifelse(age_group %in% "Ages_65-74_yrs", 31483433, age_group_pop),
age_group_pop = ifelse(age_group %in% "Ages_75+_yrs", 22574830, age_group_pop),
pct_vax1 = administered_dose1 / age_group_pop,
pct_vax2 = administered_dose2 / age_group_pop)
pct_known <- vax_demo %>%
filter(demographic_category %in% "Age_known")
pct_known <- max(pct_known$administered_dose1_pct_us)
ages$pct_known <- pct_known
write_csv(ages, "ages_viz.csv")
# by date
vaccines %>%
group_by(date) %>%
filter(category %in% "United States") %>%
summarise(total = sum(doses_administered)) %>%
tail()
old_data <- read_csv("https://raw.githubusercontent.com/ckelly17/Vaccine-Tracker/main/vaccine_db.csv") %>%
mutate(date = as.character(date),
skipped = "No",
skip_n = 0) %>%
filter(!is.na(date))
View(old_data)
missed <- fromJSON("https://raw.githubusercontent.com/COVID19Tracking/covid-tracking-data/4b9b5d18f47e6942ba458f13ce098e887ad7039f/data/cdc_vaccinations.json")
missed <- missed[[2]]
old_data <- bind_rows(old_data, missed)
View(old_data)
View(missed)
old_data <- bind_rows(old_data, missed)
View(old_data)
old_data <- bind_rows(old_data, missed)
library(jsonlite)
library(tidyverse)
library(janitor)
library(lubridate)
library(googlesheets4)
setwd("/Users/conorkelly/Documents/Vaccine-Tracker")
## import existing data cached from previous day
old_data <- read_csv("https://raw.githubusercontent.com/ckelly17/Vaccine-Tracker/main/vaccine_db.csv") %>%
mutate(date = as.character(date),
skipped = "No",
skip_n = 0) %>%
filter(!is.na(date))
missed <- fromJSON("https://raw.githubusercontent.com/COVID19Tracking/covid-tracking-data/4b9b5d18f47e6942ba458f13ce098e887ad7039f/data/cdc_vaccinations.json")
missed <- missed[[2]]
old_data2 <- bind_rows(old_data, missed)
View(old_data2)
View(missed)
library(jsonlite)
library(tidyverse)
library(janitor)
library(lubridate)
library(googlesheets4)
setwd("/Users/conorkelly/Documents/Vaccine-Tracker")
## import existing data cached from previous day
old_data <- read_csv("https://raw.githubusercontent.com/ckelly17/Vaccine-Tracker/main/vaccine_db.csv") %>%
mutate(date = as.character(date),
skipped = "No",
skip_n = 0) %>%
filter(!is.na(date))
missed <- fromJSON("https://raw.githubusercontent.com/COVID19Tracking/covid-tracking-data/4b9b5d18f47e6942ba458f13ce098e887ad7039f/data/cdc_vaccinations.json")
missed <- missed[[2]] %>%
clean_names()
old_data2 <- bind_rows(old_data, missed)
View(old_data2)
source('~/Documents/Vaccine-Tracker/vaccine_tracker.R', echo=TRUE)
reticulate::repl_python()
